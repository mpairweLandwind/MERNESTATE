// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          ListingType
  property      PropertyType 
  status        PropertyStatus  
  description   String
  city          String      @default("Bujumbura") 
  address       String
  regularPrice  Float
  discountPrice Float
  bathrooms     Int
  bedrooms      Int
  furnished     Boolean
  parking       Boolean
  offer         Boolean
  latitude      Float?
  longitude     Float?  
  imageUrls     String[]
  userRef       String        @db.ObjectId
  user          User          @relation(fields: [userRef], references: [id])
  createdAt     DateTime      @default(now())
  postDetail    PostDetail?
  savedPosts    SavedPost[]

  @@map("listings")
}

// Enums for ListingType and PropertyType
enum ListingType {
  sale
  buy
  rent
}

enum PropertyType {
  land
  apartment
  condo
  house
}

// Enums for UserRole
enum UserRole {
  admin
  landlord
  user
}

enum PropertyStatus {
  available
  occupied
  under_contract
  for_sale
  under_renovation
  pending_approval
  sold
  terminated
  pending_availability
  inactive
}


// User model
enum UserStatus {
  active
  inactive
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  username   String      @unique
  email      String      @unique
  role       UserRole    @default(user)  
  password   String
  avatar     String      @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  createdAt  DateTime    @default(now())
  listings      Listing[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])   
  chatIDs    String[]    @db.ObjectId
  status     UserStatus  @default(active)

  @@map("users")
}



model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  listing    Listing    @relation(fields: [postId], references: [id], onDelete: Cascade) // Add onDelete: Cascade
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userRef], references: [id])
  listing      Listing     @relation(fields: [postId], references: [id])
  userRef    String   @unique @db.ObjectId
  postId    String   @unique @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userRef, postId])
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userRefs], references: [id])
  userRefs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}