generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


model Listing {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  type          ListingType
  property      PropertyType 
  status        PropertyStatus  
  description   String
  city          String        @default("Bujumbura") 
  address       String
  regularPrice  Float
  discountPrice Float
  bathrooms     Int
  bedrooms      Int
  furnished     Boolean
  parking       Boolean
  offer         Boolean
  latitude      Float?
  longitude     Float?  
  imageUrls     String[]
  userRef       String        @db.ObjectId
  user          User          @relation(fields: [userRef], references: [id])
  createdAt     DateTime      @default(now())
  postDetail    PostDetail?
  savedPosts    SavedPost[]
  approvalStatus ApprovalStatus @default(DISAPPROVED)
  transactions  Transaction[]  // Reference to transactions

  @@map("listings")
}

model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  username   String      @unique
  email      String      @unique
  role       UserRole    @default(user)  
  password   String
  avatar     String      @default("https://cdn.pixabay.com/photo/2015/10/05/22/37/blank-profile-picture-973460_1280.png")
  createdAt  DateTime    @default(now())
  listings   Listing[]
  maintenance Maintenance[]
  savedPosts SavedPost[]
  chats      Chat[]      @relation(fields: [chatIDs], references: [id])   
  chatIDs    String[]    @db.ObjectId
  status     UserStatus  @default(active)
  transactions Transaction[]  // Reference to transactions

  @@map("users")
}

model Maintenance {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  name                 String 
  type                 Maintenancekind
  property             PropertyKind
  status               PropertyState
  description          String
  city                 String          
  address              String
  size                 Float?
  maintenanceCharge    Float
  furnished            Boolean
  parking              Boolean
  latitude             Float?
  longitude            Float?
  imageUrls            String[]
  yearBuilt            Float?            // Year the property was built
  lastRenovationDate   DateTime?       // Last renovation date
  maintenanceHistory   MaintenanceHistory[] // List of past maintenance activities
  materialsUsed        String          // Details about the materials used in construction
  estimatedValue       Float?          // Estimated value of the property
  condition            PropertyCondition // Current condition of the property
  maintenanceSchedule  String          // Schedule for regular maintenance
  userRef              String          @db.ObjectId
  user                 User            @relation(fields: [userRef], references: [id])
  createdAt            DateTime        @default(now())
  transactions         Transaction[]  // Reference to transactions
}

model Transaction {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  userId      String      @db.ObjectId
  propertyId  String      @db.ObjectId
  amount      Float
  status      String
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  listing     Listing?    @relation(fields: [propertyId], references: [id])
  maintenance Maintenance? @relation(fields: [propertyId], references: [id])
  
  @@map("transactions")
}





enum ApprovalStatus {
  APPROVED
  DISAPPROVED
}


enum ListingType {
  sale
  buy
  rent
}

enum PropertyType {
  land
  apartment
  condo
  house
}

enum UserRole {
  admin
  landlord
  user
}

enum PropertyStatus {
  available
  occupied
  under_contract
  for_sale
  under_renovation
  pending_approval
  sold
  terminated
  pending_availability
  inactive
}

enum UserStatus {
  active
  inactive
}






model MaintenanceHistory {
  id                   String          @id @default(auto()) @map("_id") @db.ObjectId
  maintenanceId        String          @db.ObjectId
  maintenance          Maintenance     @relation(fields: [maintenanceId], references: [id])
  description          String
  date                 DateTime        @default(now())
  cost                 Float
}

enum PropertyCondition {
  NEW
  GOOD
  FAIR
  POOR
}

enum Maintenancekind {
  Routine
  Preventive
  Corrective
  Predictive
  Emergency
  Cosmetic
  Seasonal
  Deffered
}
enum PropertyKind {
  RESIDENTIAL
  COMMERCIAL
  INDUSTRIAL
  LAND
}

enum PropertyState {
  UNOCCUPIED
  RENTED
  UNDER_MAINTENANCE
  UNDER_SALE
}


model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  listing    Listing    @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userRef], references: [id])
  listing      Listing     @relation(fields: [postId], references: [id])
  userRef    String   @db.ObjectId
  postId    String   @db.ObjectId
  createdAt DateTime @default(now())

  @@unique([userRef, postId])
}

model Chat {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  users       User[]    @relation(fields: [userRefs], references: [id])
  userRefs    String[]  @db.ObjectId
  createdAt   DateTime  @default(now())
  seenBy      String[]  @db.ObjectId
  messages    Message[]
  lastMessage String?
}


model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userRef    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}
